<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--    引入外部的文件信息，一定是要写在第一行的-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--    注解扫描-->
    <context:component-scan base-package="com.mao"/>

    <!--    配置数据库的连接：数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!--        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>-->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--    定义JdbcTemplate 实现对数据库的管理-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    配置事务声明（增强）-->
    <tx:advice id="tx-advice1" transaction-manager="transactionManager">
        <tx:attributes>
<!--            指定需要添加事务的方法，可以指定单个方法，也可以指定一系列方法-->
<!--            timeout超时自动关闭-->
<!--            read-only是否是只读，-->
<!--            propagation事务的传播方式 方法中存在事务的嵌套关系，事务本身具备隔离性，此时需要处理事务传播问题
                A-C进行交易，B-C发起新的交易
                1 MANDATORY
                2 NEVER 不支持事务
                3 NESTED 事务存在，新的交易使用新的事务
                4 NOT_SUPPORTED 不支持事务，全程以非事务的方式执行
                5 REQUIRED 默认，存在事务就在事务执行，如果不存在单独创建一个新事物执行
                6 REQUIRES_NEW 创建新事物，如果存在将暂停
                7 SUPPORTS 支持事务，如果不存在，以非事务的方式执行
                isolation 隔离级别
                1 DEFAULT
                2 READ_UNCONMITTED
                3 READ_COMMITTED
                4 REPEATABLE_READ
                5 SERIALIZABLE


-->
            <tx:method name="transfer*" timeout="10" read-only="false" propagation="REQUIRED" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

<!--    配置切点切面-->
    <aop:config>
        <aop:pointcut id="tx-pt" expression="execution(* com.mao.mapper.Impl.TestMapperImpl.*(..))"/>
        <aop:advisor advice-ref="tx-advice1" pointcut-ref="tx-pt"/>
    </aop:config>

<!--    基于注解开发，添加注解式事务管理声明-->
    <tx:annotation-driven/>
</beans>

